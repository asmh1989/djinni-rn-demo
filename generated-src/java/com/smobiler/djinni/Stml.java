// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stml.djinni

package com.smobiler.djinni;

import java.util.concurrent.atomic.AtomicBoolean;

/** stml */
public abstract class Stml {
    public abstract void start(String server, int port);

    public abstract void setKeeplive(boolean alive);

    public abstract void forceReconnect();

    public abstract void post(String msg, boolean showloading);

    public abstract void bye();

    public abstract void setListener(StmlListener listener);

    public static native Stml create();

    private static final class CppProxy extends Stml
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void start(String server, int port)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_start(this.nativeRef, server, port);
        }
        private native void native_start(long _nativeRef, String server, int port);

        @Override
        public void setKeeplive(boolean alive)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setKeeplive(this.nativeRef, alive);
        }
        private native void native_setKeeplive(long _nativeRef, boolean alive);

        @Override
        public void forceReconnect()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_forceReconnect(this.nativeRef);
        }
        private native void native_forceReconnect(long _nativeRef);

        @Override
        public void post(String msg, boolean showloading)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_post(this.nativeRef, msg, showloading);
        }
        private native void native_post(long _nativeRef, String msg, boolean showloading);

        @Override
        public void bye()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_bye(this.nativeRef);
        }
        private native void native_bye(long _nativeRef);

        @Override
        public void setListener(StmlListener listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setListener(this.nativeRef, listener);
        }
        private native void native_setListener(long _nativeRef, StmlListener listener);
    }
}
