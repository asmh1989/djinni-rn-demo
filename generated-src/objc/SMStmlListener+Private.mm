// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stml.djinni

#import "SMStmlListener+Private.h"
#import "SMStmlListener.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class StmlListener::ObjcProxy final
: public ::smobiler::StmlListener
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void connecting() override
    {
        @autoreleasepool {
            [Handle::get() connecting];
        }
    }
    void connected() override
    {
        @autoreleasepool {
            [Handle::get() connected];
        }
    }
    void disconnect(const std::string & c_error) override
    {
        @autoreleasepool {
            [Handle::get() disconnect:(::djinni::String::fromCpp(c_error))];
        }
    }
    void received(const std::string & c_msg) override
    {
        @autoreleasepool {
            [Handle::get() received:(::djinni::String::fromCpp(c_msg))];
        }
    }
    void sended(const std::string & c_msg) override
    {
        @autoreleasepool {
            [Handle::get() sended:(::djinni::String::fromCpp(c_msg))];
        }
    }
    void sending(const std::string & c_msg, bool c_showloading) override
    {
        @autoreleasepool {
            [Handle::get() sending:(::djinni::String::fromCpp(c_msg))
                       showloading:(::djinni::Bool::fromCpp(c_showloading))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto StmlListener::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto StmlListener::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
