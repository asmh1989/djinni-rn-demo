// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stml.djinni

#pragma once

#include "djinni_support.hpp"
#include "utils_interface.hpp"

namespace djinni_generated {

class NativeUtilsInterface final : ::djinni::JniInterface<::smobiler::UtilsInterface, NativeUtilsInterface> {
public:
    using CppType = std::shared_ptr<::smobiler::UtilsInterface>;
    using CppOptType = std::shared_ptr<::smobiler::UtilsInterface>;
    using JniType = jobject;

    using Boxed = NativeUtilsInterface;

    ~NativeUtilsInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeUtilsInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeUtilsInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeUtilsInterface();
    friend ::djinni::JniClass<NativeUtilsInterface>;
    friend ::djinni::JniInterface<::smobiler::UtilsInterface, NativeUtilsInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::smobiler::UtilsInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::string getRootPath() override;

    private:
        friend ::djinni::JniInterface<::smobiler::UtilsInterface, ::djinni_generated::NativeUtilsInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/smobiler/djinni/UtilsInterface") };
    const jmethodID method_getRootPath { ::djinni::jniGetMethodID(clazz.get(), "getRootPath", "()Ljava/lang/String;") };
};

}  // namespace djinni_generated
