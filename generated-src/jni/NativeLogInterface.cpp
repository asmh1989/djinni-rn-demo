// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stml.djinni

#include "NativeLogInterface.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeLogInterface::NativeLogInterface() : ::djinni::JniInterface<::smobiler::LogInterface, NativeLogInterface>() {}

NativeLogInterface::~NativeLogInterface() = default;

NativeLogInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeLogInterface::JavaProxy::~JavaProxy() = default;

void NativeLogInterface::JavaProxy::d(const std::string & c_tag, const std::string & c_msg) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeLogInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_d,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_tag)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_msg)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeLogInterface::JavaProxy::w(const std::string & c_tag, const std::string & c_msg) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeLogInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_w,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_tag)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_msg)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeLogInterface::JavaProxy::e(const std::string & c_tag, const std::string & c_msg) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeLogInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_e,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_tag)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_msg)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeLogInterface::JavaProxy::i(const std::string & c_tag, const std::string & c_msg) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeLogInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_i,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_tag)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_msg)));
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
