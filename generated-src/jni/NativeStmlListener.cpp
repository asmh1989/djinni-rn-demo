// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stml.djinni

#include "NativeStmlListener.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeStmlListener::NativeStmlListener() : ::djinni::JniInterface<::smobiler::StmlListener, NativeStmlListener>() {}

NativeStmlListener::~NativeStmlListener() = default;

NativeStmlListener::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeStmlListener::JavaProxy::~JavaProxy() = default;

void NativeStmlListener::JavaProxy::connecting() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeStmlListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_connecting);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeStmlListener::JavaProxy::connected() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeStmlListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_connected);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeStmlListener::JavaProxy::disconnect(const std::string & c_error) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeStmlListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_disconnect,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_error)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeStmlListener::JavaProxy::received(const std::string & c_msg) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeStmlListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_received,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_msg)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeStmlListener::JavaProxy::sended(const std::string & c_msg) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeStmlListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_sended,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_msg)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeStmlListener::JavaProxy::sending(const std::string & c_msg, bool c_showloading) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeStmlListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_sending,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_msg)),
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_showloading)));
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
