// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stml.djinni

#pragma once

#include "djinni_support.hpp"
#include "log_interface.hpp"

namespace djinni_generated {

class NativeLogInterface final : ::djinni::JniInterface<::smobiler::LogInterface, NativeLogInterface> {
public:
    using CppType = std::shared_ptr<::smobiler::LogInterface>;
    using CppOptType = std::shared_ptr<::smobiler::LogInterface>;
    using JniType = jobject;

    using Boxed = NativeLogInterface;

    ~NativeLogInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeLogInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeLogInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeLogInterface();
    friend ::djinni::JniClass<NativeLogInterface>;
    friend ::djinni::JniInterface<::smobiler::LogInterface, NativeLogInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::smobiler::LogInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void d(const std::string & tag, const std::string & msg) override;
        void w(const std::string & tag, const std::string & msg) override;
        void e(const std::string & tag, const std::string & msg) override;
        void i(const std::string & tag, const std::string & msg) override;

    private:
        friend ::djinni::JniInterface<::smobiler::LogInterface, ::djinni_generated::NativeLogInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/smobiler/djinni/LogInterface") };
    const jmethodID method_d { ::djinni::jniGetMethodID(clazz.get(), "d", "(Ljava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_w { ::djinni::jniGetMethodID(clazz.get(), "w", "(Ljava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_e { ::djinni::jniGetMethodID(clazz.get(), "e", "(Ljava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_i { ::djinni::jniGetMethodID(clazz.get(), "i", "(Ljava/lang/String;Ljava/lang/String;)V") };
};

}  // namespace djinni_generated
