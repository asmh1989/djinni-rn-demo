// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stml.djinni

#include "NativeCache.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeCache::NativeCache() : ::djinni::JniInterface<::smobiler::Cache, NativeCache>("com/smobiler/djinni/Cache$CppProxy") {}

NativeCache::~NativeCache() = default;


CJNIEXPORT void JNICALL Java_com_smobiler_djinni_Cache_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::smobiler::Cache>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_com_smobiler_djinni_Cache_00024CppProxy_native_1get(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jstring j_defaultVaue)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::smobiler::Cache>(nativeRef);
        auto r = ref->get(::djinni::String::toCpp(jniEnv, j_key),
                          ::djinni::String::toCpp(jniEnv, j_defaultVaue));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_smobiler_djinni_Cache_00024CppProxy_native_1find(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::smobiler::Cache>(nativeRef);
        auto r = ref->find(::djinni::String::toCpp(jniEnv, j_key));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_smobiler_djinni_Cache_00024CppProxy_native_1del(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::smobiler::Cache>(nativeRef);
        auto r = ref->del(::djinni::String::toCpp(jniEnv, j_key));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_smobiler_djinni_Cache_00024CppProxy_native_1put(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jstring j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::smobiler::Cache>(nativeRef);
        auto r = ref->put(::djinni::String::toCpp(jniEnv, j_key),
                          ::djinni::String::toCpp(jniEnv, j_value));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_smobiler_djinni_Cache_00024CppProxy_native_1getRootPath(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::smobiler::Cache>(nativeRef);
        auto r = ref->getRootPath();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
