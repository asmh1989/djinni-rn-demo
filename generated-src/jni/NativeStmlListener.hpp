// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stml.djinni

#pragma once

#include "djinni_support.hpp"
#include "stml_listener.hpp"

namespace djinni_generated {

class NativeStmlListener final : ::djinni::JniInterface<::smobiler::StmlListener, NativeStmlListener> {
public:
    using CppType = std::shared_ptr<::smobiler::StmlListener>;
    using CppOptType = std::shared_ptr<::smobiler::StmlListener>;
    using JniType = jobject;

    using Boxed = NativeStmlListener;

    ~NativeStmlListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeStmlListener>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeStmlListener>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeStmlListener();
    friend ::djinni::JniClass<NativeStmlListener>;
    friend ::djinni::JniInterface<::smobiler::StmlListener, NativeStmlListener>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::smobiler::StmlListener
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void connecting() override;
        void connected() override;
        void disconnect(const std::string & error) override;
        void received(const std::string & msg) override;
        void sended(const std::string & msg) override;
        void sending(const std::string & msg, bool showloading) override;

    private:
        friend ::djinni::JniInterface<::smobiler::StmlListener, ::djinni_generated::NativeStmlListener>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/smobiler/djinni/StmlListener") };
    const jmethodID method_connecting { ::djinni::jniGetMethodID(clazz.get(), "connecting", "()V") };
    const jmethodID method_connected { ::djinni::jniGetMethodID(clazz.get(), "connected", "()V") };
    const jmethodID method_disconnect { ::djinni::jniGetMethodID(clazz.get(), "disconnect", "(Ljava/lang/String;)V") };
    const jmethodID method_received { ::djinni::jniGetMethodID(clazz.get(), "received", "(Ljava/lang/String;)V") };
    const jmethodID method_sended { ::djinni::jniGetMethodID(clazz.get(), "sended", "(Ljava/lang/String;)V") };
    const jmethodID method_sending { ::djinni::jniGetMethodID(clazz.get(), "sending", "(Ljava/lang/String;Z)V") };
};

}  // namespace djinni_generated
